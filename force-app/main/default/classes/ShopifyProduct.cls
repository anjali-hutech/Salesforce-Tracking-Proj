//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class ShopifyProduct {

	public class Options {
		public Long id {get;set;} 
		public Long product_id {get;set;} 
		public String name {get;set;} 
		public Integer position {get;set;} 
		public List<String> values {get;set;} 

		public Options(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'product_id') {
							product_id = parser.getLongValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'values') {
							values = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Options consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Variants {
		public Long id {get;set;} 
		public Long product_id {get;set;} 
		public String title {get;set;} 
		public String price {get;set;} 
		public String sku {get;set;} 
		public Integer position {get;set;} 
		public String inventory_policy {get;set;} 
		public String compare_at_price {get;set;} 
		public String fulfillment_service {get;set;} 
		public Object inventory_management {get;set;} 
		public String option1 {get;set;} 
		public String option2 {get;set;} 
		public String option3 {get;set;} 
		public String created_at {get;set;} 
		public String updated_at {get;set;} 
		public Boolean taxable {get;set;} 
		public String barcode {get;set;} 
		public Integer grams {get;set;} 
		public Long image_id {get;set;} 
		public Double weight {get;set;} 
		public String weight_unit {get;set;} 
		public Long inventory_item_id {get;set;} 
		public Integer inventory_quantity {get;set;} 
		public Integer old_inventory_quantity {get;set;} 
		public Boolean requires_shipping {get;set;} 
		public String admin_graphql_api_id {get;set;} 

		public Variants(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'product_id') {
							product_id = parser.getLongValue();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'price') {
							price = parser.getText();
						} else if (text == 'sku') {
							sku = parser.getText();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'inventory_policy') {
							inventory_policy = parser.getText();
						} else if (text == 'compare_at_price') {
							compare_at_price = parser.getText();
						} else if (text == 'fulfillment_service') {
							fulfillment_service = parser.getText();
						} else if (text == 'inventory_management') {
							inventory_management = parser.readValueAs(Object.class);
						} else if (text == 'option1') {
							option1 = parser.getText();
						} else if (text == 'option2') {
							option2 = parser.getText();
						} else if (text == 'option3') {
							option3 = parser.getText();
						} else if (text == 'created_at') {
							created_at = parser.getText();
						} else if (text == 'updated_at') {
							updated_at = parser.getText();
						} else if (text == 'taxable') {
							taxable = parser.getBooleanValue();
						} else if (text == 'barcode') {
							barcode = parser.getText();
						} else if (text == 'grams') {
							grams = parser.getIntegerValue();
						} else if (text == 'image_id') {
							image_id = parser.getLongValue();
						} else if (text == 'weight') {
							weight = parser.getDoubleValue();
						} else if (text == 'weight_unit') {
							weight_unit = parser.getText();
						} else if (text == 'inventory_item_id') {
							inventory_item_id = parser.getLongValue();
						} else if (text == 'inventory_quantity') {
							inventory_quantity = parser.getIntegerValue();
						} else if (text == 'old_inventory_quantity') {
							old_inventory_quantity = parser.getIntegerValue();
						} else if (text == 'requires_shipping') {
							requires_shipping = parser.getBooleanValue();
						} else if (text == 'admin_graphql_api_id') {
							admin_graphql_api_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Variants_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Products {
		public Long id {get;set;} 
		public String title {get;set;} 
		public String body_html {get;set;} 
		public String vendor {get;set;} 
		public String product_type {get;set;} 
		public String created_at {get;set;} 
		public String handle {get;set;} 
		public String updated_at {get;set;} 
		public Object published_at {get;set;} 
		public Object template_suffix {get;set;} 
		public String status {get;set;} 
		public String published_scope {get;set;} 
		public String tags {get;set;} 
		public String admin_graphql_api_id {get;set;} 
		public List<Variants> variants {get;set;} 
		public List<Options> options {get;set;} 
		public List<Images> images {get;set;} 
		public Images image {get;set;} 

		public Products(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'body_html') {
							body_html = parser.getText();
						} else if (text == 'vendor') {
							vendor = parser.getText();
						} else if (text == 'product_type') {
							product_type = parser.getText();
						} else if (text == 'created_at') {
							created_at = parser.getText();
						} else if (text == 'handle') {
							handle = parser.getText();
						} else if (text == 'updated_at') {
							updated_at = parser.getText();
						} else if (text == 'published_at') {
							published_at = parser.readValueAs(Object.class);
						} else if (text == 'template_suffix') {
							template_suffix = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'published_scope') {
							published_scope = parser.getText();
						} else if (text == 'tags') {
							tags = parser.getText();
						} else if (text == 'admin_graphql_api_id') {
							admin_graphql_api_id = parser.getText();
						} else if (text == 'variants') {
							variants = arrayOfVariants(parser);
						} else if (text == 'options') {
							options = arrayOfOptions(parser);
						} else if (text == 'images') {
							images = arrayOfImages(parser);
						} else if (text == 'image') {
							image = new Images(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Products consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Variant_ids {

		public Variant_ids(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Variant_ids consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Images {
		public Long id {get;set;} 
		public Long product_id {get;set;} 
		public Integer position {get;set;} 
		public String created_at {get;set;} 
		public String updated_at {get;set;} 
		public Object alt {get;set;} 
		public Integer width {get;set;} 
		public Integer height {get;set;} 
		public String src {get;set;} 
		public List<Variant_ids> variant_ids {get;set;} 
		public String admin_graphql_api_id {get;set;} 

		public Images(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'product_id') {
							product_id = parser.getLongValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'created_at') {
							created_at = parser.getText();
						} else if (text == 'updated_at') {
							updated_at = parser.getText();
						} else if (text == 'alt') {
							alt = parser.readValueAs(Object.class);
						} else if (text == 'width') {
							width = parser.getIntegerValue();
						} else if (text == 'height') {
							height = parser.getIntegerValue();
						} else if (text == 'src') {
							src = parser.getText();
						} else if (text == 'variant_ids') {
							variant_ids = arrayOfVariant_ids(parser);
						} else if (text == 'admin_graphql_api_id') {
							admin_graphql_api_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Images consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Products> products {get;set;} 

	public ShopifyProduct(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'products') {
						products = arrayOfProducts(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'ShopifyProduct consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Images_Z {
		public Long id {get;set;} 
		public Long product_id {get;set;} 
		public Integer position {get;set;} 
		public String created_at {get;set;} 
		public String updated_at {get;set;} 
		public String alt {get;set;} 
		public Integer width {get;set;} 
		public Integer height {get;set;} 
		public String src {get;set;} 
		public List<Variant_ids> variant_ids {get;set;} 
		public String admin_graphql_api_id {get;set;} 

		public Images_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'product_id') {
							product_id = parser.getLongValue();
						} else if (text == 'position') {
							position = parser.getIntegerValue();
						} else if (text == 'created_at') {
							created_at = parser.getText();
						} else if (text == 'updated_at') {
							updated_at = parser.getText();
						} else if (text == 'alt') {
							alt = parser.getText();
						} else if (text == 'width') {
							width = parser.getIntegerValue();
						} else if (text == 'height') {
							height = parser.getIntegerValue();
						} else if (text == 'src') {
							src = parser.getText();
						} else if (text == 'variant_ids') {
							variant_ids = arrayOfVariant_ids(parser);
						} else if (text == 'admin_graphql_api_id') {
							admin_graphql_api_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Images_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ShopifyProduct parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ShopifyProduct(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Variants> arrayOfVariants_Z(System.JSONParser p) {
        List<Variants> res = new List<Variants>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Variants(p));
        }
        return res;
    }


    private static List<Images_Z> arrayOfImages_Z(System.JSONParser p) {
        List<Images_Z> res = new List<Images_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Images_Z(p));
        }
        return res;
    }


    private static List<Variants> arrayOfVariants(System.JSONParser p) {
        List<Variants> res = new List<Variants>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Variants(p));
        }
        return res;
    }















    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<Long> arrayOfLong(System.JSONParser p) {
        List<Long> res = new List<Long>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getLongValue());
        }
        return res;
    }








    private static List<Images> arrayOfImages(System.JSONParser p) {
        List<Images> res = new List<Images>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Images(p));
        }
        return res;
    }


    private static List<Products> arrayOfProducts(System.JSONParser p) {
        List<Products> res = new List<Products>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Products(p));
        }
        return res;
    }


    private static List<Options> arrayOfOptions(System.JSONParser p) {
        List<Options> res = new List<Options>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Options(p));
        }
        return res;
    }




    private static List<Variant_ids> arrayOfVariant_ids(System.JSONParser p) {
        List<Variant_ids> res = new List<Variant_ids>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Variant_ids(p));
        }
        return res;
    }




}